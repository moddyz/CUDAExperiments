name: Build and test

# Run the jobs for pushes and pull requests targetting main branch.
on: 
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

jobs:

  # Build and test project.
  linux-build:
    strategy:
      matrix:
        build:
          - 1
        include:
          - build: 1
            build-type: Release
            build-tests: 'ON'
            build-docs: 'OFF'
    name: 'Ubuntu 18.04
      <type=${{ matrix.build-type }},
       tests=${{ matrix.build-tests }},
       docs=${{ matrix.build-docs }}>'
    runs-on: ubuntu-18.04
    steps:
      - name: Install dependencies (Linux)
        run: |
          sudo add-apt-repository ppa:graphics-drivers/ppa
          sudo apt-get update
          sudo apt-get install cmake cuda-10.0
      - uses: actions/checkout@v2
      - name: Create build directories
        run: |
          mkdir _build
          mkdir _install
      - name: Configure
        run: |
          cmake -DCMAKE_BUILD_TYPE=${{ matrix.build-type }} \
                -DBUILD_TESTING=${{ matrix.build-tests }} \
                -DBUILD_DOCUMENTATION=${{ matrix.build-docs }} \
                -DCMAKE_CUDA_COMPILER="/usr/local/cuda/bin/nvcc" \
                -DCMAKE_INSTALL_PREFIX=../_install \
                ..
        working-directory: _build
      - name: Build
        run: |
          cmake --build . \
                --verbose \
                --target install \
                --config ${{ matrix.build-type }}
        working-directory: _build
      - name: Test
        run: ctest -VV --output-on-failure -C ${{ matrix.build-type }}
        working-directory: _build

  # Run automated code formatting checks.
  check-code-formatting:
    name: "Check C++ code formatting"
    runs-on: ubuntu-18.04 
    steps:
      - name: Install clang-format
        run: sudo apt-get install clang-format-10
      - uses: actions/checkout@v2
      - name: Run clang-format on source code
        run: |
          find . \
            -name ".git" -prune -o \
            -name "thirdparty" -prune -o \
            -name "*.cpp" -type f -exec clang-format -i --verbose {} + -o \
            -name "*.h" -type f -exec clang-format -i --verbose {} +
      - name: Check for source differences
        run: |
          set +e
          git diff --color
          git diff-index --quiet HEAD --; EXIT_CODE=$?
          set -e
          if [ $EXIT_CODE -ne 0 ]; then echo "C++ code formatting check failed.  Please run clang-format on *.h and *.cpp, then push your changes."; fi
          exit $EXIT_CODE
